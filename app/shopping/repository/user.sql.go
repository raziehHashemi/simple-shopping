// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user.sql

package repository

import (
	"context"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (
  username,
  balance
) VALUES (
  $1, $2
)
RETURNING id, username, balance, signup_at
`

type CreateCustomerParams struct {
	Username string
	Balance  int64
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer, arg.Username, arg.Balance)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Balance,
		&i.SignupAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
  username,
  password,
  firstname,
  lastname,
  email,
  role_id
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, username, firstname, lastname, password, email, role_id
`

type CreateUserParams struct {
	Username  string
	Password  string
	Firstname string
	Lastname  string
	Email     string
	RoleID    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Password,
		&i.Email,
		&i.RoleID,
	)
	return i, err
}

const deleteCustomerById = `-- name: DeleteCustomerById :exec
DELETE FROM customer
WHERE id = $1
`

func (q *Queries) DeleteCustomerById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCustomerById, id)
	return err
}

const deleteCustomerByUsername = `-- name: DeleteCustomerByUsername :exec
DELETE FROM customer
WHERE username = $1
`

func (q *Queries) DeleteCustomerByUsername(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteCustomerByUsername, username)
	return err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM "user"
WHERE id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const deleteUserByUsername = `-- name: DeleteUserByUsername :exec
DELETE FROM "user"
WHERE username = $1
`

func (q *Queries) DeleteUserByUsername(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByUsername, username)
	return err
}

const getBalanceByUsername = `-- name: GetBalanceByUsername :one
SELECT id, username, balance, signup_at FROM customer
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetBalanceByUsername(ctx context.Context, username string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getBalanceByUsername, username)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Balance,
		&i.SignupAt,
	)
	return i, err
}

const getCustomerById = `-- name: GetCustomerById :one
SELECT id, username, balance, signup_at FROM customer
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCustomerById(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerById, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Balance,
		&i.SignupAt,
	)
	return i, err
}

const getCustomerGreaterThan = `-- name: GetCustomerGreaterThan :many
SELECT id, username, balance, signup_at FROM customer
WHERE balance >= $1 
ORDER BY id
`

func (q *Queries) GetCustomerGreaterThan(ctx context.Context, balance int64) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, getCustomerGreaterThan, balance)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Balance,
			&i.SignupAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomerLessThan = `-- name: GetCustomerLessThan :many
SELECT id, username, balance, signup_at FROM customer
WHERE balance < $1 
ORDER BY id
`

func (q *Queries) GetCustomerLessThan(ctx context.Context, balance int64) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, getCustomerLessThan, balance)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Balance,
			&i.SignupAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, firstname, lastname, password, email, role_id FROM "user"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Password,
		&i.Email,
		&i.RoleID,
	)
	return i, err
}

const getUserByRoleId = `-- name: GetUserByRoleId :many
SELECT id, username, firstname, lastname, password, email, role_id FROM "user"
WHERE role_id = $1 
ORDER BY username
`

func (q *Queries) GetUserByRoleId(ctx context.Context, roleID string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUserByRoleId, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Firstname,
			&i.Lastname,
			&i.Password,
			&i.Email,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, firstname, lastname, password, email, role_id FROM "user"
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Password,
		&i.Email,
		&i.RoleID,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, username, balance, signup_at FROM customer
ORDER BY id
`

func (q *Queries) ListCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Balance,
			&i.SignupAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, firstname, lastname, password, email, role_id FROM "user"
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Firstname,
			&i.Lastname,
			&i.Password,
			&i.Email,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
